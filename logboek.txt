Om de progressie bij te houden doen we een voor-meting die valt te vergelijken met de verbeteringen in het project. Die voor-meting was gemiddeld: 45501.

Als eerst hebben we een spatial hash toegevoegd, hiermee kunnen de tanks efficiënter uit elkaar gedreven worden en controleert het niet elke tank van dezelfde kleur.
Ook kunnen we deze spatial hash gebruiken om de raketten dichter om zichzelf heen te laten controleren voor colissions zodat hij niet constant alle vijandelijke tanks controleert.
In eerste instantie had het updaten van de tanks een big O van O(n^2) (best case) Na het toepassen van de spatial hash word de big O in het begin O(n^2) (worst case)
Echter, zodra de tanks uit elkaar gedreven zijn en dus niet meer allemaal in elkaar kunnen komen is de worst case O(54) De 54 is beredeneerd op basis van de tank size, namelijk 14 x 18 pixels en de cell grootte van 36 pixels.
De spatial hash zorgt er namelijk voor dat de tanks enkel de cel waar zij zich zelf in bevinden en de 8 cellen daar omheen hoeven te controlleren. Dit maakt het update proces vele malen sneller.
De raketten update functie is door gebruik van de spatial hash ook enorm verbeterd. Eerst controleerde de raketten al vliegend elke frame of er een tank binnen hun colission radius zat,
nu wordt dat alleen gedaan in de 9 cellen om zich heen.

Dit zorgt voor een speed-up van 3.1x t.o.v. de voor-meting. De gemiddelde simulatie-tijd is: 14.7 seconden.

Vervolgens hebben wij het algoritme om een lijst met health van alle tanks per team te sorteren verbeterd. Dit hebben wij gedaan door een lijst met alleen integers daarin als health te sorteren met count sort.
In het begin van de applicatie wordt een lijst met tankpointers gevuld en die wordt hierbij gebruikt. Dit zorgt voor een marginale winst van 1 tot 2 seconden max. Het insertion sort algortime was O(n^2) terwijl de count sort een O(n+k) heeft.
Dit zorgte voor een speed-up van 3.5x t.o.v. de voor-meting en een gemiddelde tijdswinst van 1,5 seconden t.o.v. de vorige meting. De gemiddelde simulatie-tijd is nu namelijk: 13,2 seconden.

Na het toepassen van deze 2 algoritmische verbeteringen hebben wij besloten dingen te gaan multithreaden. Volgens de debug profile van visual studio was nog steeds de Game::update een van de grootste bottlenecks. Wij hebben gebruik gemaakt van de meegeleverde ThreadPool.
Door de threadpool te gebruiken kunnen wij threads hergebruiken dat zorgt voor minder overhead. Het eerste deel van de update methode is het updaten van de tanks.

//update_tanks vooraf
	T1 = n^2
	T∞ = n
Worst case van de tank update is nog steeds n^2 als alle tanks in dezelfde cell zouden zitten. Door de nudging is dit echter niet mogelijk want de tanks worden uit elkaar gedrukt.

//update Rockets
	T1 = n * m
	T∞ = n
Je checkt voor elke rocket 9 cellen om hem heen en controleert of zij binnen de collision radius komen.

//update Smokes
	T1 = n
	T∞ = 1
Eerst werd er een for-loop met alle smokes gedaan. Bij T∞ is er voor elke smoke een thread die het kan uitvoeren.

//update Explosion
	T1 = n
	T∞ = 1
Eerst werd er een for-loop met alle explosions gedaan. Bij T∞ is er voor elke explosion een thread die het kan uitvoeren.

//update Particle_beam vooraf
	T1 = n * m
	T∞ = m
Ook hier werd een for loop gedaan met alle particle_beams en vervolgens werden alle tanks gecheckt. Door het toepassen van de spatial_hash wordt het aantal tanks flink gereduceerd de particle beam hoeft nu maar m tanks in 9 gridcellen omzichheen te controleren.


